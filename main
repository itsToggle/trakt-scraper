$trakt_client_id = "***"
$trakt_client_secret = "***"
$trakt_access_token = "***"
$real_debrid_token ='***'
$premiumize_api_key = "***"

function get_token {

$Header = @{
    "Content-type" = "application/json"
    "trakt-api-key" = "$trakt_client_id"
    "trakt-api-version" = "2"
    "Authorization" = "Bearer $trakt_access_token"
    
}

$get_token = ConvertTo-Json -InputObject @{
   code = "C1670BE1"
   client_id = $trakt_client_id
   client_secret = $trakt_client_secret
   grant_type = 'authorization_code'
   redirect_uri = "urn:ietf:wg:oauth:2.0:oob"
}

$get_token_response = Invoke-RestMethod -Uri "https://api.trakt.tv/oauth/device/code" -Method Post -Body $get_token -Headers $Header

Write-Output $get_token_response

#Write-Host "code is " $get_token_response.user_code "go to trakt.tv/activate"

$device_code = $get_token_response.device_code

$poll_token = ConvertTo-Json -InputObject @{
   code = $device_code
   client_id = $trakt_client_id
   client_secret = $trakt_client_secret
}

sleep 60

$poll_token_response = Invoke-RestMethod -Uri "https://api.trakt.tv/oauth/device/token" -Method Post -Body $poll_token -Headers $Header

Write-Output $poll_token_response

}

function main {

    $timer =  [system.diagnostics.stopwatch]::StartNew()

    $count = 0

    $counters = @()

    $countRD = 0

    $countPM = 0

    while(1) {

        #download trakt.tv collections and watchlist

            $Header = @{
                "Content-type" = "application/json"
                "trakt-api-key" = "$trakt_client_id"
                "trakt-api-version" = "2"
                "Authorization" = "Bearer $trakt_access_token"
    
            }

            $trakt = new-object system.collections.arraylist
    
            # get_collection_shows
    
            $get_collection_response = Invoke-RestMethod -Uri "https://api.trakt.tv/sync/collection/shows" -Method Get -Headers $Header -SessionVariable traktsession

            Foreach ($entry in $get_collection_response) {
                      
                $trakt += $entry.show

            }

            $count++

            # get_watchlist_shows
  
            $get_watchlist_response = Invoke-RestMethod -Uri "https://api.trakt.tv/sync/watchlist/shows" -Method Get -Headers $Header -WebSession $traktsession
      
            Foreach ($entry in $get_watchlist_response) {
               
            if(-Not $trakt_new.title.Contains($entry.show.title)) {
            
                    $trakt += $entry.show

                }
            }

            $count++

            # add special show stuff

            Foreach ($show in $trakt) {
        
                $show | Add-Member -type NoteProperty -name type -Value "tv"  -Force
    
                $show | Add-Member -type NoteProperty -name query -Value $null  -Force

                $show | Add-Member -type NoteProperty -name last_episode -Value 1   -Force

                $show | Add-Member -type NoteProperty -name last_season -Value 1  -Force

                $show | Add-Member -type NoteProperty -name next_episode -Value 1  -Force

                $show | Add-Member -type NoteProperty -name next_episode_id -Value $null  -Force

                $show | Add-Member -type NoteProperty -name next_season -Value 1  -Force

                $show | Add-Member -type NoteProperty -name next_season_id -Value $null  -Force

                $show_id = $show.ids.trakt

                $entry = Invoke-RestMethod -Uri "https://api.trakt.tv/shows/$show_id/progress/collection?hidden=false&specials=false&count_specials=true" -Method Get -Headers $Header -WebSession $traktsession
        
                $count++
        
                $show.next_episode = $entry.next_episode.number            
        
                $show.next_episode_id = $entry.next_episode.ids

                $show.next_season = $entry.next_episode.season
        
                $show.last_episode = $entry.last_episode.number         
        
                $show.last_season = $entry.last_episode.season
        

                #check airing

                $now = Get-Date -UFormat "%Y-%m-%d"
    
                $show | Add-Member -type NoteProperty -name download_type -Value $null -Force

                $show_next_season = $show.next_season

                $show_next_episode = $show.next_episode

                if ($show.next_episode -ne $null) {

                    $entry0 = Invoke-RestMethod -Uri "https://api.trakt.tv/shows/$show_id/seasons?extended=full" -Method Get -Headers $Header -WebSession $traktsession
            
                    $count++
            
                    if(-Not $entry0.number.Contains(0)){
                
                        $entrynumber = $show_next_season-1
            
                    }else{
               
                        $entrynumber = $show_next_season
            
                    }

                    $show.next_season_id = $entry0.ids[$entrynumber]

                    if($entry0.episode_count[$entrynumber] -ne $entry0.aired_episodes[$entrynumber]) {
                
                        $entry = Invoke-RestMethod -Uri "https://api.trakt.tv/shows/$show_id/seasons/$show_next_season/episodes/$show_next_episode ?extended=full" -Method Get -Headers $Header -WebSession $traktsession
               
                        $count++
                
                        $first_aired_long = $entry.first_aired

                        $first_aired = $first_aired_long.subString(0, [System.Math]::Min(10, $first_aired_long.Length))

                        if((get-date $now) -lt (get-date $first_aired)) {
                    
                            $show.download_type = $null
                
                        } else {
                    
                            $season = "{0:d2}" -f $show_next_season

                            $episode = "{0:d2}" -f $show_next_episode

                            $title = $show.title -replace('\s','.') ` -replace(':','')

                            $show.download_type = "episode"
                    
                            $show.query = -join($title,".S",$season,"E",$episode)                
                    
                        }

                    } elseif($show.next_episode -eq "1") {
                
                        $season = "{0:d2}" -f $show_next_season

                        $title = $show.title-replace('\s','.') ` -replace(':','')

                        $show.download_type = "season"
                
                        $show.query = -join($title,".S",$season)
                
                    } else {
                        
                        $show.download_type = $null
                    
                    }

                }
            }    

            # get_collection_movies

            $get_collection_response = Invoke-RestMethod -Uri "https://api.trakt.tv/sync/collection/movies" -Method Get -Headers $Header -WebSession $traktsession
    
            $count++
   
            Foreach ($entry in $get_collection_response) {
        
                $trakt += $entry.movie

            }

            #get_watchlist_movies

            $get_watchlist_response = Invoke-RestMethod -Uri "https://api.trakt.tv/sync/watchlist/movies" -Method Get -Headers $Header -WebSession $traktsession
   
            $count++
   
            Foreach ($entry in $get_watchlist_response) {
               
                if(-Not $trakt.title.Contains($entry.movie.title)) {

                    $title = $entry.movie.title -replace('\s','.') ` -replace(':','')

                    $query = -join($title,".",$entry.movie.year) 

                    $entry.movie | Add-Member -type NoteProperty -name download_type -Value "movie" -Force

                    $entry.movie | Add-Member -type NoteProperty -name type -Value "movie"  -Force

                    $entry.movie | Add-Member -type NoteProperty -name query -Value $query  -Force
            
                    $trakt += $entry.movie

                }
            }


            Foreach ($object in $trakt){

                $object | Add-Member -type NoteProperty -name scraper -Value $null -Force

                $object | Add-Member -type NoteProperty -name cached -Value $null -Force

                $object | Add-Member -type NoteProperty -name hashed -Value $null -Force

                $object | Add-Member -type NoteProperty -name status -Value 1 -Force

            }

            clear

            Get-Date

            Write-Output $trakt | Format-Table -Property @{ e='title'; width = 30 },@{ e='last_season'; width = 15 },@{ e='last_episode'; width = 15 },@{ e='next_season'; width = 15 },@{ e='next_episode'; width = 15 },@{ e='download_type'; width = 15 }

        #api safety call

            if([math]::Round($timer.Elapsed.TotalSeconds,0) -ge 300) {

                $timer.Stop()

                $seconds =  [math]::Round($timer.Elapsed.TotalSeconds,0)

                $time = Get-Date

                $counters += "$time | in the last ~5 Minutes: $count calls to trakt.tv, Downloads added: RD $countRD - PM $countPM "
    
                $timer =  [system.diagnostics.stopwatch]::StartNew()

                if($count -gt 900) {
        
                    Write-Host "Pausing for 5 Minutes to cool down API ..."
        
                    Sleep 300
                }

                $count = 0

                $countdRD = 0

                $countPM = 0
            }

            Write-Output $counters

            if(-not $trakt.download_type.Contains("episode") -or -not $trakt.download_type.Contains("season")){

                Sleep 60

            }else{

                Sleep 5

            }

        #add scraper to $trakt            

            Foreach ($object in $trakt) {

                if ($object.query -ne $null -and $object.status -le 1) { 

                    [int]$retries = 0
            
                    do { 
                
                        $retries++

                        $query = $object.query

                        $rarbg = new-object system.collections.arraylist 

                        $uri = -join ('https://torrentapi.org/pubapi_v2.php?mode=search&search_string=', $query, '&token=lnjzy73ucv&format=json_extended&app_id=lol')

                        $response = Invoke-WebRequest $uri -SessionVariable rarbgsession

                        $content = $response.Content

                        $items = [regex]::matches($content, "(?<={).*?(`"})").value

                        Foreach ($item in $items) {
    
                            $title = [regex]::matches($item, "(?<=title`":`").*?(?=`",)").value
                            
                            $quality = [regex]::matches($title, "(1080)|(720)|(2160)").value 
                            
                            $category = [regex]::matches($item, "(?<=category`":`").*?(?=`",)").value
                            
                            $download = [regex]::matches($item, "(?<=download`":`").*?(?=`",)").value
                            
                            $seeders = [regex]::matches($item, "(?<=seeders`":).*?(?=,)").value
                            
                            $imdb = [regex]::matches($item, "(?<=imdb`":`").*?(?=`",)").value
                            
                            $hash = [regex]::matches($download, "(?<=btih:).*?(?=&)").value
                            
                            if ([regex]::matches($title, "($query\.)").value  -And -Not [regex]::matches($title, "(REMUX)|(\.3D\.)").value -and $category -ne "Movies\/Full BD") {
                                
                                $rarbg += new-object psobject -property @{title=$title;quality=[int]$quality;category=$category;magnets=$download;seeders=[int]$seeders;imdb=$imdb;hashes=$hash}
                            
                            }
                        }

                        $object.scraper += @($rarbg | Sort-Object -Property @{ Expression = 'quality'; Descending = $true }, @{ Expression = 'seeders'; Descending = $true })

                        $object.status = 2

                        Sleep 5

                    } while ($object.scraper.hashes -eq $null -and $retries -le 5)

                    if($retries -gt 5) {
                       
                        $object.scraper.hashes = $null #changed
                    
                    }

                }

            }
 
        #check debrid services for scraped magnets. If magnet is cached, direct download. Premiumize prefered for cached downloads.

            Foreach ($object in $trakt) {

                $object | Add-Member -type NoteProperty -name service -Value $null -Force
            
                if($object.scraper.hashes -ne $null -and $object.status -le 2) {

                    $object.status = 3
                
                    Foreach ($item in $object.scraper) {
                
                        $hashstring = $item.hashes

                        $magnet = $item.magnets
  
                        $Header = @{
                            "authorization" = "Bearer $real_debrid_token"
                        }

                        $Post_Hash = @{
                            Method = "GET"
                            Uri =  "https://api.real-debrid.com/rest/1.0/torrents/instantAvailability/$hashstring"
                            Headers = $Header
                        }

                        $body_pm = -join("https://www.premiumize.me/api/cache/check?items%5B%5D=",$magnet,"&apikey=",$premiumize_api_key)

                        $check_cache_RD = Invoke-WebRequest @Post_Hash -WebSession $realdebridsession
                
                        $check_cache_PM = Invoke-RestMethod -Uri $body_pm -Method Get -SessionVariable premiumizesession

                        if($check_cache_PM.response){
                    
                            $object.service = "PM"
							
							$uri_pm = -join("https://www.premiumize.me/api/transfer/directdl?apikey=",$premiumize_api_key)
							
                            $get_link = Invoke-RestMethod -Uri $uri_pm -Method Post -Body @{src=$magnet} -H @{"Content-Type" = "application/x-www-form-urlencoded"}  -SessionVariable premiumizesession

                            $torrent_name = $check_cache_PM.filename

                            $type = $object.type

                            Foreach ($download in $get_link.content.link){
                        
                                $shit=Invoke-WebRequest -Headers @{"Content-type"="application/json"} -Method Post -Body "{`"jsonrpc`":`"2.0`",`"id`":`"qwer`",`"method`":`"aria2.addUri`",`"params`":[`"token:premiumizer`",[`"$download`"], {`"dir`": `"D:\\$type\\$torrent_name`"}]}" http://192.168.0.23:6800/jsonrpc -SessionVariable aria2csession

                                Sleep 2

                            }

                            traktsync $object

                            $count++

                            $count++

                            $countPM++

                            break

                        }elseif([int]$check_cache_RD.RawContentLength -gt [int]"60") {

                            $object.service = "RD"
 
                            $object.cached = $item.magnets

                            $hashes = $item.hashes

                            $object.hashed = $hashes

                            break

                        }
               
                        Sleep 5
                    }

                    Sleep 5

                }

                #Add selected Magnet to RD

                if($object.scraper.magnets -ne $null -and $object.status -le 3 -and $object.service -eq "RD") {
            
                    $magnet = $object.scraper.magnets[0]

                    if($object.cached -ne $null) {
                        
                        $magnet = $object.cached
                    }
    
                    $Header = @{
                        "authorization" = "Bearer $real_debrid_token"
                    }

                    $Post_Magnet = @{
                        Method = "POST"
                        Uri =  "https://api.real-debrid.com/rest/1.0/torrents/addMagnet"
                        Headers = $Header
                        Body = @{ magnet = $magnet }
                    }

                    $response = Invoke-RestMethod @Post_Magnet -WebSession $realdebridsession

                    $torrent_id = $response.id

                    $Get_Torrent_Info = @{
                        Method = "GET"
                        Uri = "https://api.real-debrid.com/rest/1.0/torrents/info/$torrent_id"
                        Headers = $Header
                    }

                    $response = Invoke-RestMethod @Get_Torrent_Info -WebSession $realdebridsession

                    $torrent_status = $response.status

                    while( $torrent_status -eq "magnet_conversion"){
                        Sleep 15
                        $response = Invoke-RestMethod @Get_Torrent_Info
                        $torrent_status = $response.status
                    }


                    #$large_files = $response.files | Where-Object {$_.bytes -gt 5000000}

                    $Post_File_Selection = @{
                        Method = "POST"
                        Uri =  "https://api.real-debrid.com/rest/1.0/torrents/selectFiles/$torrent_id"
                        Headers = $Header
                        Body = @{ files = "all" } #$large_files.id -join ',' }
    
                    }

                    $object.status = 4

                    Invoke-RestMethod @Post_File_Selection -WebSession $realdebridsession

                    $countRD++
            
                }
            }

        #monitor debrid services for completion of added magnets - At the moment only RD. Premiumize torrents are only accepted if cached and downloaded directly.      
    
            $Header = @{
                "authorization" = "Bearer $real_debrid_token"
            }

            $Get_Torrents = @{
                Method = "GET"
                Uri = "https://api.real-debrid.com/rest/1.0/torrents"
                Headers = $Header
            }

            $Post_Unrestrict_Link = @{
                Method = "POST"
                Uri =  "https://api.real-debrid.com/rest/1.0/unrestrict/link"
                Headers = $Header
                Body = @{link = $rd_link}
            }   
    
            $response = Invoke-RestMethod @Get_Torrents -WebSession $realdebridsession
    
            $torrents = $response | Select id, filename, status, links, hash   

            Foreach ($torrent in $torrents) {

                $torrent_hash = $torrent.hash

                $torrent_name = $torrent.filename

                $reference = $trakt | where hashed -CContains "$torrent_hash"

                if($torrent.status -eq "downloaded"){
            
                    $links = $torrent.links
                    
                    $torrent_name = $torrent.filename
                    
                    $torrent_id = $torrent.id

                    $type = $reference.type

                    if($reference.type -eq $null) {       
                        if([regex]::matches($torrent_name, ".*?(?=\.s[0-9]{2})").Success) {
                            $type = "tv"
                        }elseif([regex]::matches($torrent_name, ".*?(?=.[0-9]{4}\.)").Success){
                            $type = "movie"
                        }else{
                            $type = "default"
                        }
                    }

                    Foreach ($link in $links) {

                        $RD_link = $link

                        $Post_Unrestrict_Link = @{
                            Method = "POST"
                            Uri =  "https://api.real-debrid.com/rest/1.0/unrestrict/link"
                            Headers = @{"authorization" = "Bearer $real_debrid_token"}
                            Body = @{link = "$RD_link"}
                        }
                
                        $response=Invoke-RestMethod @Post_Unrestrict_Link  -WebSession $realdebridsession      
   
                        $download = $response.download

                        $shit=Invoke-WebRequest -Headers @{"Content-type"="application/json"} -Method Post -Body "{`"jsonrpc`":`"2.0`",`"id`":`"qwer`",`"method`":`"aria2.addUri`",`"params`":[`"token:premiumizer`",[`"$download`"], {`"dir`": `"D:\\$type\\$torrent_name`"}]}" http://192.168.0.23:6800/jsonrpc -SessionVariable aria2csession

                    }
                    
                    Sleep 5
                    
                    $Delete_Torrent = @{
                        Method = "DELETE"
                        Uri =  "https://api.real-debrid.com/rest/1.0/torrents/delete/$torrent_id"
                        Headers = @{"authorization" = "Bearer $real_debrid_token"}
                    }
                    
                    Invoke-RestMethod @Delete_Torrent -WebSession $realdebridsession 
                }

                if($reference.type -ne $null) {

                    traktsync $reference

                    $count++

                    $count++

                }

            }

            Sleep 10

        }
}

function traktsync($reference) {

            Sleep 1

            $movies = @()

            $shows = @()

            $shows_ = @()

            $seasons = @()

            $seasons_ = @()

            $episodes = @()


            $object = $reference.next_season_id

            $candidateProps = $object.psobject.properties.Name

            $nonNullProps = $candidateProps.Where({ $null -ne $object.$_ })

            $season_id = $object | Select-Object $nonNullProps


            $object = $reference.next_episode_id

            $candidateProps = $object.psobject.properties.Name

            $nonNullProps = $candidateProps.Where({ $null -ne $object.$_ })

            $episode_id = $object | Select-Object $nonNullProps


            $object = $reference.ids

            $candidateProps = $object.psobject.properties.Name

            $nonNullProps = $candidateProps.Where({ $null -ne $object.$_ })

            $nonnullids = $object | Select-Object $nonNullProps


            if($reference.download_type.Contains("season")) {
         
                $ids= $season_id

                $season_id = @{"ids"= $ids}

                $seasons += $season_id

            }elseif ($reference.download_type.Contains("episode")){

                $enumber = $reference.next_episode

                $e = @{"number"=$enumber}

                $episodes += $e

                $snumber = $reference.next_season

                $s = @{"number"=$snumber;"episodes"=$episodes}

                $seasons_ += $s
               
                $reference | Add-Member -type NoteProperty -name seasons -Value $seasons_ -Force
               
                $shows_ += $reference | Select title, year, ids, seasons   

            }
        
            if ($reference.type.Contains("movie")){

                $ids= $nonnullids

                $movie_id = @{"ids"= $ids}

                $movies += $movie_id

            }
        
            if($reference.type.Contains("tv")) {

                $ids= $nonnullids 

                $show_id = @{"ids"= $ids}

                $shows += $show_id

            }
        
            $watchlist_remove = ConvertTo-Json -Depth 10 -InputObject @{
                movies = $movies
                shows=$shows
            }
        
            Sleep 1
                    
            $post_watchlist_remove = Invoke-RestMethod -Uri "https://api.trakt.tv/sync/watchlist/remove" -Method Post -Body $watchlist_remove -Headers @{"Content-type" = "application/json";"trakt-api-key" = "$trakt_client_id";"trakt-api-version" = "2";"Authorization" = "Bearer $trakt_access_token"} -WebSession $traktsession
            $count++
            #Write-Output $post_watchlist_remove.deleted   
      
            $collection_add = ConvertTo-Json -Depth 10 -InputObject @{
                seasons=$seasons
                shows=$shows_
                movies = $movies
            }

            #Write-Output $collection_add

            #Write-Host

            Sleep 1
                    
            $post_collection_add = Invoke-RestMethod -Uri "https://api.trakt.tv/sync/collection" -Method Post -Body $collection_add -Headers @{"Content-type" = "application/json";"trakt-api-key" = "$trakt_client_id";"trakt-api-version" = "2";"Authorization" = "Bearer $trakt_access_token"}  -WebSession $traktsession
            $count++  
            #Write-Output $post_collection_add

            $reference.status = 1

}

#fucking around:

function missed {

    $Header = @{
        "Content-type" = "application/json"
        "trakt-api-key" = "$trakt_client_id"
        "trakt-api-version" = "2"
        "Authorization" = "Bearer $trakt_access_token"
    
    }

    $trakt_new = new-object system.collections.arraylist
    
    $trakt_xml_array = Import-Clixml -Path .\trakt.xml

    $trakt_xml = [System.Collections.ArrayList]$trakt_xml_array

    
# get_collection_shows

    $get_collection_response = Invoke-RestMethod -Uri "https://api.trakt.tv/sync/collection/shows" -Method Get -Headers $Header -SessionVariable traktsession

    #Write-Output $get_collection_response.seasons  | sort -Property number -Unique

    Foreach ($entry in $get_collection_response) {
        
        Foreach($season in $entry.seasons){
            
            $season.episodes = $season.episodes | Select-Object -Property * -ExcludeProperty collected_at
        }
      
        $seasons = $entry.seasons | Sort -Property number -Unique 

        $entry.show | Add-Member -type NoteProperty -name collected -Value $seasons
        
        $trakt_new += $entry.show 

    }

    $trakt_new | Add-Member -type NoteProperty -name available -Value $null

    $trakt_new | Add-Member -type NoteProperty -name missed -Value $null

    Foreach($show in $trakt_new){
        
        $show_id = $show.ids.trakt

        $seasons = Invoke-RestMethod -Uri "https://api.trakt.tv/shows/$show_id/seasons?extended=episodes" -Method Get -Headers $Header -WebSession $traktsession

        Foreach($entry in $seasons) {
            $entry.episodes = $entry.episodes | Select -Property number
        }

        $seasons = $seasons  | Select-Object -Property * -ExcludeProperty ids | Where-Object {$_.number  -ne 0} 

        $show.available = $seasons
        
        $missed = Compare-Object -ReferenceObject $show.available -DifferenceObject $show.collected -PassThru | Select-Object -Property * -ExcludeProperty SideIndicator
                                    
        $show.missed = @($missed)
                 
    }

    #Write-Output $trakt_new.missed

    $trakt_new.collected.episodes | Add-Member -type NoteProperty -name scraper -Value $null

    $trakt_new.collected | Add-Member -type NoteProperty -name scraper -Value $null

    Write-Output $trakt_new

}

function keepscraped {

$Header = @{
        "Content-type" = "application/json"
        "trakt-api-key" = "$trakt_client_id"
        "trakt-api-version" = "2"
        "Authorization" = "Bearer $trakt_access_token"
    
    }

    $trakt_new = @() #new-object system.collections.arraylist
    
    $trakt_xml_array = Import-Clixml -Path .\trakt.xml

    $trakt_xml = [System.Collections.ArrayList]$trakt_xml_array

    
# get_collection_shows
    
    $get_collection_response = Invoke-RestMethod -Uri "https://api.trakt.tv/sync/collection/shows" -Method Get -Headers $Header -SessionVariable traktsession

    Foreach ($entry in $get_collection_response) {
                      
        $trakt_new += $entry.show

    }
    $count++
# get_watchlist_shows
  
    $get_watchlist_response = Invoke-RestMethod -Uri "https://api.trakt.tv/sync/watchlist/shows" -Method Get -Headers $Header -WebSession $traktsession
      
    Foreach ($entry in $get_watchlist_response) {
               
        if(-Not $trakt_new.title.Contains($entry.show.title)) {
            
            $trakt_new += $entry.show

        }
    }
    $count++
# add special show stuff

   Foreach ($show in $trakt_new) {
        
        $show | Add-Member -type NoteProperty -name type -Value "tv"  -Force

        $show | Add-Member -type NoteProperty -name query -Value $null  -Force

        $show | Add-Member -type NoteProperty -name last_episode -Value 1   -Force

        $show | Add-Member -type NoteProperty -name last_season -Value 1  -Force

        $show | Add-Member -type NoteProperty -name next_episode -Value 1  -Force

        $show | Add-Member -type NoteProperty -name next_episode_id -Value $null  -Force

        $show | Add-Member -type NoteProperty -name next_season -Value 1  -Force

        $show | Add-Member -type NoteProperty -name next_season_id -Value $null  -Force

        $show_id = $show.ids.trakt

        $entry = Invoke-RestMethod -Uri "https://api.trakt.tv/shows/$show_id/progress/collection?hidden=false&specials=false&count_specials=true" -Method Get -Headers $Header -WebSession $traktsession
        $count++
        $show.next_episode = $entry.next_episode.number            
        
        $show.next_episode_id = $entry.next_episode.ids

        $show.next_season = $entry.next_episode.season
        
        $show.last_episode = $entry.last_episode.number         
        
        $show.last_season = $entry.last_episode.season
        

    #check airing

        $now = Get-Date -UFormat "%Y-%m-%d"
    
        $show | Add-Member -type NoteProperty -name download_type -Value $null -Force

        $show_next_season = $show.next_season

        $show_next_episode = $show.next_episode

        if ($show.next_episode -ne $null) {

            $entry0 = Invoke-RestMethod -Uri "https://api.trakt.tv/shows/$show_id/seasons?extended=full" -Method Get -Headers $Header -WebSession $traktsession
            $count++
            if(-Not $entry0.number.Contains(0)){
                $entrynumber = $show_next_season-1
            }else{
                $entrynumber = $show_next_season
            }

            $show.next_season_id = $entry0.ids[$entrynumber]

            if($entry0.episode_count[$entrynumber] -ne $entry0.aired_episodes[$entrynumber]) {
                
                $entry = Invoke-RestMethod -Uri "https://api.trakt.tv/shows/$show_id/seasons/$show_next_season/episodes/$show_next_episode ?extended=full" -Method Get -Headers $Header -WebSession $traktsession
                $count++
                $first_aired_long = $entry.first_aired

                $first_aired = $first_aired_long.subString(0, [System.Math]::Min(10, $first_aired_long.Length))

                if((get-date $now) -lt (get-date $first_aired)) {
                    $show.download_type = $null
                } else {
                    
                    $season = "{0:d2}" -f $show_next_season

                    $episode = "{0:d2}" -f $show_next_episode

                    $title = $show.title -replace('\s','.') ` -replace(':','')

                    $show.download_type = "episode"
                    
                    $show.query = -join($title,".S",$season,"E",$episode)

                    
                    
                }
            } else {
                
                $season = "{0:d2}" -f $show_next_season

                $title = $show.title-replace('\s','.') ` -replace(':','')

                $show.download_type = "season"
                
                $show.query = -join($title,".S",$season)
                
            }

        }
    }    

# get_collection_movies

    $get_collection_response = Invoke-RestMethod -Uri "https://api.trakt.tv/sync/collection/movies" -Method Get -Headers $Header -WebSession $traktsession
    $count++
    Foreach ($entry in $get_collection_response) {
        
        $trakt_new += $entry.movie

    }

#get_watchlist_movies

    $get_watchlist_response = Invoke-RestMethod -Uri "https://api.trakt.tv/sync/watchlist/movies" -Method Get -Headers $Header -WebSession $traktsession
    $count++
    Foreach ($entry in $get_watchlist_response) {
               
        if(-Not $trakt_new.title.Contains($entry.movie.title)) {

            $title = $entry.movie.title -replace('\s','.') ` -replace(':','')

            $query = -join($title,".",$entry.movie.year) 

            $entry.movie | Add-Member -type NoteProperty -name download_type -Value "movie" -Force

            $entry.movie | Add-Member -type NoteProperty -name type -Value "movie"  -Force

            $entry.movie | Add-Member -type NoteProperty -name query -Value $query  -Force
            
            $trakt_new += $entry.movie

        }
    }

    #$trakt_new | Add-Member -type NoteProperty -name scraper -Value $null -Force

    Foreach ($new in $trakt_new){
        
        $xml = $trakt_xml | Where title -CContains $new.title

        $new | Add-Member -type NoteProperty -name scraper -Value $xml.scraper 

        $new | Add-Member -type NoteProperty -name cached -Value $xml.cached 

        $new | Add-Member -type NoteProperty -name hashed -Value $xml.hashed 

        $new | Add-Member -type NoteProperty -name status -Value $xml.status 
        
    }

#create $trakt for ongoing script -- Problem?

    #$trakt_xml = $trakt_xml |Where-Object {$trakt_new.title -contains $_.title -and $_.status -ge 2} #keep old, delte not wanted

    #$trakt_new = $trakt_new |Where-Object {$trakt_xml.title -notcontains $_.title } #add new

    #$trakt = $trakt_xml + $trakt_new

#trakt created.



#Compare-Object -ReferenceObject $trakt_new.scraper -DifferenceObject $trakt_xml.scraper -PassThru 

#Write-Output $missed

#clear

#Get-Date

Write-Output $trakt_new

#pass queries to rarbg
    
}

#start script:

    #get token -- run this first

    main
